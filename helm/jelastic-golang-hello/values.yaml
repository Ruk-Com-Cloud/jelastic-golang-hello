# Default values for jelastic-golang-hello.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Application settings
app:
  name: jelastic-golang-hello
  version: "1.0.0"

# Image settings
image:
  repository: ghcr.io/ruk-com-cloud/jelastic-golang-hello
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Image pull secrets for private registries
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Replica count
replicaCount: 3

# Service account settings
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext:
  fsGroup: 65534

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  capabilities:
    drop:
    - ALL

# Application configuration
config:
  port: 3000
  host: "0.0.0.0"
  testMessage: "Running in Kubernetes with Helm!"
  environment: "production"

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  # Enable NodePort service
  nodePort:
    enabled: false
    port: 30080
  # Enable LoadBalancer service
  loadBalancer:
    enabled: false
    annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: jelastic-golang-hello.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: jelastic-golang-hello-tls
  #    hosts:
  #      - jelastic-golang-hello.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 200m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 64Mi

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /api/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /api/health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policy
networkPolicy:
  enabled: false
  ingress:
    - from: []

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    config:
      environment: "development"
      testMessage: "Running in Development with Helm!"
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi

  staging:
    replicaCount: 2
    config:
      environment: "staging"
      testMessage: "Running in Staging with Helm!"

  production:
    replicaCount: 3
    config:
      environment: "production"
      testMessage: "Running in Production with Helm!"
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 128Mi